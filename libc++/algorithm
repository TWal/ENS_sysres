#ifndef __SUPOS_CPP_ALGORITHM
#define __SUPOS_CPP_ALGORITHM

#include<iterator>
#include <stdio.h>

namespace std {
    template <class ForwardIterator, class T>
    ForwardIterator lower_bound (ForwardIterator first,
                                 ForwardIterator last, const T& val){
        ForwardIterator it;
        typename iterator_traits<ForwardIterator>::difference_type count, step;
        count = distance(first,last);
        while (count>0)
        {
            it = first; step=count/2; advance (it,step);
            if (*it<val) {
                first=++it;
                count-=step+1;
            }
            else count=step;
        }
        return first;
    }

    template <class ForwardIterator, class T, class Compare>
    ForwardIterator lower_bound (ForwardIterator first, ForwardIterator last,
                                 const T& val, Compare comp){
        ForwardIterator it;
        typename iterator_traits<ForwardIterator>::difference_type count, step;
        count = distance(first,last);
        while (count>0)
        {
            it = first; step=count/2; advance (it,step);
            //printf("Compare in lb ");
            if (comp(*it,val)){
                //printf ( "in ");
                first=++it;
                count-=step+1;
            }
            else count=step;
        }
        return first;
    }
    template<class InputIterator, class OutputIterator>
    OutputIterator move (InputIterator first, InputIterator last, OutputIterator result)
    {
        while (first!=last) {
            *result = std::move(*first);
            ++result; ++first;
        }
        return result;
    }

    template<class BidirectionalIterator1, class BidirectionalIterator2>
    BidirectionalIterator2 move_backward ( BidirectionalIterator1 first,
                                           BidirectionalIterator1 last,
                                           BidirectionalIterator2 result )
    {
        while (last!=first) *(--result) = std::move(*(--last));
        return result;
    }
    template<class InputIterator, class OutputIterator>
    OutputIterator copy (InputIterator first, InputIterator last, OutputIterator result)
    {
        while (first!=last) {
            *result = *first;
            ++result; ++first;
        }
        return result;
    }
    template<class BidirectionalIterator1, class BidirectionalIterator2>
    BidirectionalIterator2 copy_backward ( BidirectionalIterator1 first,
                                           BidirectionalIterator1 last,
                                           BidirectionalIterator2 result )
    {
        while (last!=first) *(--result) = *(--last);
        return result;
    }

}

#endif
