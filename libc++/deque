#ifndef __SUPOS_CPP_DEQUE
#define __SUPOS_CPP_DEQUE

#include <cstddef>
#include <memory>
#include <assert.h>
#include <utility>
#include <new>
#include <algorithm>
#include <stdio.h>
#include <string>

namespace std{
    template<class T, class Alloc = allocator<T> >
    class deque {
    public :
        typedef T value_type;
        typedef Alloc allocator_type;
        typedef T* pointer;
        typedef const T* const_pointer;
        typedef T& reference;
        typedef const T& const_reference;
        typedef size_t size_type;
    private :
        Alloc _alloc;
        pointer _data;
        size_type _capacity;
        size_type _begIndex;
        size_type _endIndex;

        /* Class Invariant :
           either _begIndex == _capacity == _endIndex == 0 and _data == nullptr
           and no memory or object are owned by the deque. This is called empty state.
           or
           _data is a valid pointer given by _alloc with capacity _capacity
           owned only by this.
           if _endIndex >= _begIndex
               the area from _begIndex to _endIndex excluded is composed of
               valid constructed objects owned by this.
               the rest is uninitialized memory.
           else
               the area from _begIndex to _capacity and from 0 to _endIndex is composed of
               valid constructed objects owned by this.
               the rest is uninitialized memory.
           _begIndex < _capacity and _endIndex < _capacity always hold.
         */
        inline size_type strategy(size_type s){ // return > s
            size_t bsr;
            asm("bsr %1,%0" : "=r"(bsr) : "r"(s+1));
            size_t res = 1 << (bsr +1);
            assert(res > s);
            if(res) return res;
            else return s+1;
        }

        inline void destroy(pointer input,size_t nb){
            for(size_t i = 0 ; i < nb ; ++i){
                input[i].~value_type();
            }
        }
        inline void incr(size_t& n){
            ++n;
            if(n == _capacity) n = 0;

        }
        inline void decr(size_t& n){
            n = n == 0 ? _capacity -1 : n -1;

        }
        class deque_pos{
        protected:
            friend deque;
            size_t _index;
            size_t _mod;
            size_t _beg;
            deque_pos(size_t index,size_t mod,size_t beg) :
                _index(index),_mod(mod),_beg(beg){}
        public :
            deque_pos& operator++(){
                ++_index;
                if(_index == _mod) _index = 0;
                return *this;
            }
            deque_pos& operator--(){
                _index = _index == 0 ? _mod -1 : _index -1;
                return *this;
            }
            deque_pos& operator+=(size_t n){
                _index += n;
                _index%= _mod;
                return *this;
            }
            deque_pos& operator-=(size_t n){
                n %= _mod;
                _index += _mod - n;
                _index %= _mod;
                return *this;
            }
            bool operator==(const deque_pos& oth) const{
                return _index == oth._index;
            }
            bool operator!=(const deque_pos& oth) const {
                return ! (*this == oth);
            }
            size_t off(size_t n)const{
                n %= _mod;
                return (_index + _mod -n) % _mod;
            }
            size_t getInd()const{return _index;}
        };



    public :

        explicit deque(const allocator_type& alloc = allocator_type())
            : _alloc(alloc),_data(nullptr),_capacity(0),_begIndex(0),_endIndex(0){}

        explicit deque (size_type n) : _alloc(){
            _capacity = strategy(n);
            _begIndex = 0;
            _endIndex = n;
            _data = _alloc.allocate(_capacity);
            for(size_t i = 0 ; i < n ; ++i){
                new (_data +i) T();
            }
        }
        deque(const deque& oth) : _alloc(oth.alloc),_data(nullptr),
                                  _capacity(0),_begIndex(0),_endIndex(0){
            reserve(oth.size());
            for(auto t : oth){
                push_back(t);
            }
        }

        class iterator{
            T* _data;
            deque_pos _dp;
        public :
            iterator(T* data,size_t index,size_t mod,size_t beg):
                _data(data),_dp(index,mod,beg){}
            iterator& operator++(){
                ++_dp;
                return *this;
            }
            iterator& operator--(){
                --_dp;
                return *this;
            }
            iterator& operator+=(size_t n){
                _dp+=n;
                return *this;
            }
            iterator& operator-=(size_t n){
                _dp-=n;
                return *this;
            }
            bool operator==(const iterator& oth) const{
                return _data == oth._data && _dp == oth._dp;
            }
            bool operator!=(const iterator& oth) const {
                return ! (*this == oth);
            }
            T& operator*() const {
                return *(_data + _dp.getInd());
            }
            T* operator->() const{
                return _data + _dp.getInd();
            }
            T& operator[](size_t n) const {
                return *(_data + _dp.off(n));
            }
        };
        class const_iterator{
            const T* _data;
            deque_pos _dp;
        public :
            const_iterator(const T* data,size_t index,size_t mod,size_t beg):
                _data(data),_dp(index,mod,beg){}
            const_iterator& operator++(){
                ++_dp;
                return *this;
            }
            const_iterator& operator--(){
                --_dp;
                return *this;
            }
            const_iterator& operator+=(size_t n){
                _dp+=n;
                return *this;
            }
            const_iterator& operator-=(size_t n){
                _dp-=n;
                return *this;
            }
            bool operator==(const const_iterator& oth) const{
                return _data == oth._data && _dp == oth._dp;
            }
            bool operator!=(const const_iterator& oth) const {
                return ! (*this == oth);
            }
            const T& operator*() const {
                return *(_data + _dp.getInd());
            }
            const T* operator->() const{
                return _data + _dp.getInd();
            }
            const T& operator[](size_t n) const {
                return *(_data + _dp.off(n));
            }
        };
        iterator begin(){
            return iterator(_data,_begIndex,_capacity,_begIndex);
        }
        iterator end(){
            return iterator(_data,_endIndex,_capacity,_begIndex);
        }
        const_iterator begin()const{
            return const_iterator(_data,_begIndex,_capacity,_begIndex);
        }
        const_iterator end()const{
            return const_iterator(_data,_endIndex,_capacity,_begIndex);
        }
        size_type size()const{ // the number of owned and constructed objects
            return _endIndex >= _begIndex ? _endIndex - _begIndex :
                _endIndex + _capacity - _begIndex; // no underflow : _capacity > _begIndex
        }
        void reserve(size_type size){
            if (_data && size < _capacity) return;
            size_type capacity = strategy(size);
            size_type old_size = this->size();
            pointer data = _alloc.allocate(capacity);
            if(_data){
                size_t i = 0;
                for(auto it = begin() ; it != end() ; ++it){
                    new(data + i) T(move(*it));
                    ++i;
                }
                _alloc.deallocate(_data,_capacity);
            }
            _capacity = capacity;
            _data = data;
            _begIndex = 0;
            _endIndex = old_size;
        }
        void push_back (const value_type& val){
            reserve(size() +1);
            new(_data + _endIndex) T(val);
            incr(_endIndex);
        }
        void push_back (value_type&& val){
            reserve(size() +1);
            new(_data + _endIndex) T(move(val));
            incr(_endIndex);
        }
        void pop_back(){
            assert(size() > 0 && "pop_back on empty vector");
            decr(_endIndex);
            _data[_endIndex].~value_type();
        }
        void push_front (const value_type& val){
            reserve(size() +1);
            decr(_begIndex);
            new(_data + _begIndex) T(val);
        }
        void push_front (value_type&& val){
            reserve(size() +1);
            decr(_begIndex);
            new(_data + _begIndex) T(move(val));
        }
        void pop_front(){
            assert(size() > 0 && "pop_back on empty vector");
            _data[_begIndex].~value_type();
            incr(_begIndex);
        }
        bool empty() const{
            return _endIndex == _begIndex;
        }
        reference operator [](size_type i){
            return *(begin() += i);
        }
        const_reference operator [](size_type i)const{
            return *(begin() += i);
        }
        reference front(){
            return _data[_begIndex];
        }
        const_reference front() const{
            return _data[_begIndex];
        }


    };
}


#endif
