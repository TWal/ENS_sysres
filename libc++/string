#ifndef __SUPOS_CPP_STRING
#define __SUPOS_CPP_STRING

#include <cstddef>
#include <string.h> // TODO switch to cstring
#include <assert.h>
#include <memory>
#include <stdio.h>

namespace std {

    template <typename charT>
    struct char_traits {
    };

    template<>
    struct char_traits<char>{
        typedef char char_type;
        typedef int int_type;
        static inline bool eq(char_type c1,char_type c2){
            return c1 == c2;
        }
        static inline bool lt(char_type c1,char_type c2){
            return c1 < c2;
        }
        static inline size_t length(const char_type* c){
            return strlen(c);
        }
        static inline void assign(char_type& r, const char_type& c) noexcept {
            r = c;
        }
        static inline char_type assign (char_type* p, size_t n, char_type c){
            while (n--) {*p = c; ++p;};
            return c;
        }
        static inline int compare (const char_type* p, const char_type* q, size_t n) {
            while (n--) {if (!eq(*p,*q)) return lt(*p,*q)?-1:1; ++p; ++q;}
            return 0;
        }
        static inline char_type* copy (char_type* dest, const char_type* src, size_t n){
            return reinterpret_cast<char_type*>(memcpy(dest,src,n));
        }
        // TODO finish that

    };

    template < class charT,
               class traits = char_traits<charT>,
               class Alloc = allocator<charT>
               >
    class basic_string{
    public :
        typedef traits traits_type;
        typedef Alloc allocator_type;
        typedef size_t size_type;
        typedef charT value_type;
        typedef charT* pointer;
        typedef charT& reference;
        typedef pointer iterator;

        static const size_t npos = -1;

    private:
        Alloc _alloc;
        charT *_data;
        size_type _size;
        size_type _capacity;

        inline size_type strategy(size_type s){
            size_t bsr;
            asm("bsr %1,%0" : "=r"(bsr) : "r"(s+1));
            size_t res = 1 << (bsr +1);
            assert(res > s);
            if(res) return res;
            else return s;
        }

    public :

        basic_string()
            : _alloc(),_data(nullptr),_size(0),_capacity(0){}
        explicit basic_string (const allocator_type& alloc)
            : _alloc(alloc),_data(nullptr),_size(0),_capacity(0){
        }
        basic_string (const charT* s, const allocator_type& alloc = allocator_type())
            :_alloc(alloc){
            //printf("constr %s \n",s);
           _size = traits_type::length(s);
           _capacity = strategy(_size+1);
           _data = _alloc.allocate(_capacity);
           traits_type::copy(_data,s,_size +1);
        }
        basic_string (const charT* s,size_type n, const allocator_type& alloc = allocator_type())
            :_alloc(alloc){
            //printf("constr %s \n",s);
            _size = n;
            _capacity = strategy(_size+1);
            _data = _alloc.allocate(_capacity);
            traits_type::copy(_data,s,_size);
        }
        ~basic_string(){
            if(_data) _alloc.deallocate(_data,_capacity);
        }
        basic_string(const basic_string& str):basic_string(str.c_str()){
        }
        basic_string(basic_string&&str)
            :_capacity(str._capacity),_data(str._data),_size(str._size),_alloc(move(str._alloc)){

            str._data = nullptr;
            str._size = 0;
            str._capacity = 0;
            }

        basic_string& operator=(const charT* s){
            size_t size = traits_type::length(s);
            reserve(size +1);
            _size = size;
            traits_type::copy(_data,s,_size);
            return *this;
        }
        basic_string& operator=(const basic_string&str){
            reserve(str._size +1);
            _size = str._size;
            traits_type::copy(_data,str.c_str(),_size);
            return *this;
        }
        basic_string& operator=(basic_string&& str){
            this->~basic_string();
            new(this) basic_string(move(str));
            return *this;
            }

        const charT* data() const noexcept {
            const_cast<basic_string*>(this)->reserve(1);
            _data[_size] = 0;
            return _data;
        };
        const charT* c_str() const noexcept {return data();};

        reference operator [](size_type i){
            return _data[i];
        }

        const reference operator [](size_type i) const {
            return _data[i];
        }

        reference at(size_type i){
            assert(i < _size && "At assert failed");
            return _data + i;
        }

        size_type size()const {
            return _size;
        }

        void reserve(size_type size){
            if (_size >0 && size < _capacity) return;
            size_type capacity = strategy(size+1);
            pointer data = _alloc.allocate(capacity);
            if(_data) {
                traits_type::copy(data,_data,_size);
                _alloc.deallocate(_data,_capacity);
            }
            _capacity = capacity;
            _data = data;
        }

        void resize(size_t n, value_type c) {
            if(n > _size) {
                reserve(n);
                for(size_t i = _size; i < n; ++i) {
                    traits_type::assign(_data[i], c);
                }
            }
            _size = n;
        }

        void resize(size_t n) {
            resize(n, 0);
        }

        void push_back (const value_type& val){
            reserve(_size+1);
            traits_type::assign(_data[_size],val);
            ++_size;
        }

        iterator begin(){
            return _data;
        }
        iterator end(){
            return _data + _size;
        }

        value_type& front(){
            return *begin();
        }
        value_type& back(){
            return *(end()-1);
        }

        iterator erase (iterator first, iterator last){
            size_type diff = last - first;
            if(!diff)return end();
            for (int i = first - _data ; i < _size ; ++i){
                traits_type::assign(_data[i],_data[i + diff]);
            }
            _size -= diff;

        }
        iterator erase (iterator position){
            erase(position,position+1);
        }

        size_t find_first_of (char c, size_t pos = 0) const{
            if(!_data) return npos;
            pointer data = _data + pos;
            while (data < _data + _size){
                if (traits_type::eq(*data,c))return data-_data;
                ++data;
            }
            return npos;
        }

        basic_string substr (size_t pos = 0, size_t len = npos) const{
            if(pos > _size) return basic_string();
            if (len == npos) len = _size - pos;
            size_t endpos = pos + len;
            charT beg;
            traits_type::assign(beg,_data[endpos]);
            _data[endpos] = 0;
            basic_string res = _data+ pos;
            traits_type::assign(_data[endpos],beg);
            return res;
        }

        basic_string& append (const basic_string& str){
            reserve(_size + str.size()+1);
            traits_type::copy(_data+_size,str._data,str._size);
            _size += str._size;
            return *this;
        }
        basic_string& operator += (const basic_string& ref){
            return append(ref);
        }
        void pop_back(){
            assert(_size > 0 && "pop_back on empty basic_string");
            --_size;
        }
        bool empty(){
            return _size == 0;
        }
        bool operator==(const basic_string& str2){
            if (_size != str2._size) return false;
            return traits_type::compare(c_str(),str2.c_str(),_size) == 0;
        }
        bool operator!=(const basic_string& str2){
            if (_size != str2._size) return true;
            return traits_type::compare(c_str(),str2.c_str(),_size) != 0;
        }
        int compare (const basic_string& str) const noexcept{
            if(_size == 0 && str._size == 0) return 0;
            if (_size == 0) return -1;
            if (str._size == 0) return 1;
            if(_size <= str._size){
                int i = traits_type::compare(c_str(),str.c_str(),_size);
                if (i) return i;
                else return _size == str._size ? 0 : -1;
            }
            else {
                int i = traits_type::compare(c_str(),str.c_str(),str._size);
                if (i) return i;
                else return 1;
            }
        }
        bool operator<  (const basic_string& rhs) const noexcept  {
            return compare(rhs) <0;
        }
        bool operator<= (const basic_string& rhs) const noexcept{
            return compare(rhs) <=0;
        }
        bool operator>  (const basic_string& rhs) const noexcept{
            return compare(rhs) >0;
        }
        bool operator>= (const basic_string& rhs) const noexcept{
            return compare(rhs) >=0;
        }
    };

    typedef basic_string<char> string;

    template<typename T>
    basic_string<T> operator+(basic_string<T> s1, const basic_string<T>& s2) {
        return s1 += s2;
    }

}

#endif
