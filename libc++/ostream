#ifndef __SUPOS_CPP_OSTREAM
#define __SUPOS_CPP_OSTREAM
#ifndef SUP_OS_KERNEL

#include<ios>

namespace std {

    template<class charT, class traits>
    class basic_ostream : public virtual basic_ios<charT,traits>{
    public:
        using char_type = charT;
        using traits_type = traits;
        using int_type = int;
        using pos_type = streamsize;
        using off_type = streamoff;
        using basic_ios<charT,traits>::rdbuf;
        using basic_ios<charT,traits>::failbit;
        using basic_ios<charT,traits>::eofbit;
        using basic_ios<charT,traits>::badbit;
        using basic_ios<charT,traits>::setstate;
        using ios_base::flags;
        using ios_base::dec;
        using ios_base::hex;
        using ios_base::oct;
        class sentry {
            bool b;
        public:
            explicit sentry (basic_ostream& os) : b(true){
                if(os.fail() or os.eof()){
                    os.setstate(failbit);
                    b = false;
                }
            }
            explicit operator bool() const{
                return b;
            }
            sentry (const sentry&) = delete;
            sentry& operator= (const sentry&) = delete;
        };
        explicit basic_ostream (basic_streambuf<char_type,traits_type>* sb) : ios(sb){
        }
        basic_ostream(){};
        basic_ostream(const basic_ostream&) = delete;
        //protected: basic_ostream& (basic_ostream&& x);

        basic_ostream& put(char_type c){
            sentry s(*this);
            if(!s) return *this;
            int_type i = rdbuf()->sputn(&c,sizeof(char_type));
            if(i == char_type::eof()) setstate(badbit);
            return *this;
        }

        basic_ostream& write (const char_type* s, streamsize n){
            sentry st(*this);
            if(!st) return *this;
            int_type i =  rdbuf()->sputn(s,n);
            if(i < n) setstate(badbit);
            return *this;
        }
        basic_ostream& operator<<(const basic_string<charT,traits>& str){
            return write(str.c_str(),str.size());
        }
    private:

        void printDigit(int d){
        if(d <= 9) {
            return put('0' + d);
        } else {
            return put('a' + (d-10));
        }
    }

        void printUInt(unsigned long long int n, unsigned int base, unsigned int padding){
            // TODO handle prefix on flags
            unsigned long long int i = 1;
            while(n/i >= base) {
                i *= base;
                if(padding > 0) {
                    padding -= 1;
                }
            }

            for(unsigned int j = 1; j < padding; ++j) {
                put('0');
            }

            while(n > 0) {
                printDigit(n/i);
                n %= i;
                i /= base;
            }
            while(i >= 1) {
                put('0');
                i /= base;
            }
        }
        void printInt(long long int n, unsigned int base, unsigned int padding) {
            if(n < 0) { // TODO handle plus sign on flags
                put('-');
                n = -n;
            }
            printUInt(n,base,padding);
        }
    public:
        basic_ostream& operator<<(int i){
            // TODO handle padding
            if(flags() & dec) printInt(i,10,0);
            if(flags() & hex) printInt(i,16,0);
            if(flags() & oct) printInt(i,8,0);
            return *this;
        }
        basic_ostream& operator<<(unsigned int i){
            // TODO handle padding
            if(flags() & dec) printUInt(i,10,0);
            if(flags() & hex) printUInt(i,16,0);
            if(flags() & oct) printUInt(i,8,0);
            return *this;
        }


    };
}


#endif
#endif
