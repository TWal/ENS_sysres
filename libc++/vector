#ifndef __SUPOS_CPP_VECTOR
#define __SUPOS_CPP_VECTOR

#include <cstddef>
#include <memory>

namespace std{
    template < class T, class Alloc = allocator<T> >
    class vector{
    public :
        typedef T value_type;
        typedef Alloc allocator_type;
        typedef T* pointer;
        typedef size_t size_type;

    private :
        Alloc _alloc;
        pointer _data;
        size_type _size;
        size_type _capacity;

        inline size_type strategy(size_type s){
            size_t res = 1 << (8*sizeof(size_t) - __builtin_clz(s+1)+1);
            if(res) return res;
            else return s;
        }
    public :

        explicit vector (const allocator_type& alloc = allocator_type())
            :_alloc(alloc),_data(nullptr),_size(0),_capacity(0){
        }
        explicit vector (size_type n) : _alloc(){
            _size = n;
            _capacity = strategy(n);
            _data = _alloc.allocate(_capacity);
            for(size_t i = 0 ; i < n ; ++i){
                _data[i]->value_type();
            }
        }
        vector (size_type n, const value_type& val,
                const allocator_type& alloc = allocator_type());
        ~vector(){
            if(_size && _data){
                for(size_t i = 0 ; i < _size ; ++i){
                    _data[i]->~value_type();
                }
            }
            if(_data) _alloc.deallocate(_data);
        }
    };

}

#endif
