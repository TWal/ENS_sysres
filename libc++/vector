#ifndef __SUPOS_CPP_VECTOR
#define __SUPOS_CPP_VECTOR

#include <cstddef>
#include <memory>
#include <assert.h>
#include <utility>
#include <new>
#include <algorithm>
#include <stdio.h>
#include <string>

namespace std{
    template < class T, class Alloc = allocator<T> >
    class vector{
    public :
        typedef T value_type;
        typedef Alloc allocator_type;
        typedef T* pointer;
        typedef const T* const_pointer;
        typedef T& reference;
        typedef const T& const_reference;
        typedef size_t size_type;
        typedef pointer iterator;
        typedef const T* const_iterator;

    private :
        Alloc _alloc;
        pointer _data;
        size_type _size;
        size_type _capacity;

        /* Class Invariant :
           either _size == _capacity == 0 and _data = nullptr
           and no memory or object are owned by the vector called empty state
           (the vector can be empty and not in empty state) or
           _data is valid pointer given by _alloc with capacity
           _capacity owned only by this.
           the area from _data to _data + _size (excluded) is valid
           constructed objects of type T owned by this.
           the area from _data + _size to _data + _capacity is uninitialized memory.
           and of course _capacity >= _size
        */

        inline size_type strategy(size_type s){ // return > s
            size_t bsr;
            asm("bsr %1,%0" : "=r"(bsr) : "r"(s+1));
            size_t res = 1 << (bsr +1);
            assert(res > s);
            if(res) return res;
            else return s;
        }

        inline void destroy(pointer input,size_t nb){
            for(size_t i = 0 ; i < nb ; ++i){
                input[i].~value_type();
            }
        }


    public :
        explicit vector (const allocator_type& alloc = allocator_type())
            :_alloc(alloc),_data(nullptr),_size(0),_capacity(0){
        }
        explicit vector (size_type n) : _alloc(){
            _size = n;
            _capacity = strategy(n);
            _data = _alloc.allocate(_capacity);
            for(size_t i = 0 ; i < n ; ++i){
                new(_data +i) T();
            }
        }
        vector (const vector& oth): _alloc(oth._alloc),_data(nullptr),
                                    _size(0),_capacity(0){
            reserve(oth._size);
            _size = oth._size;
            for(int i =0 ; i < _size;++i){
                new(_data +i) T(oth._data[i]);
            }

        }
        vector (vector&& oth): _alloc(move(oth._alloc)),_data(oth._data),
                                     _size(oth._size),_capacity(oth._capacity){
            oth._data = nullptr;
            oth._size = 0;
            oth._capacity = 0;
        }

        //vector (size_type n, const value_type& val,
        //        const allocator_type& alloc = allocator_type());

        ~vector(){ // change a valid state to an invalid state with no memory or objects owned
            if(_size && _data){
                for(size_t i = 0 ; i < _size ; ++i){
                    _data[i].~value_type();
                }
            }
            if(_data) _alloc.deallocate(_data,_capacity);
        }

        vector& operator= (const vector& x){
            clear();
            reserve(x.size());
            _size = x._size;
            for(size_t i = 0 ; i < _size ; ++i){
                new(_data + i) T(x._data[i]);
            }
            return *this;
        }
        vector& operator= (vector&& x){
            this->~vector();
            new(this) vector(move(x));
            return *this;
        }

        reference operator [](size_type i){
            return _data[i];
        }
        const_reference operator [](size_type i)const{
            return _data[i];
        }

        reference at(size_type i){
            assert(i < _size && "At assert failed");
            return _data[i];
        }

        size_type size() const {
            return _size;
        }

        /* Switch any valid state to a valid state with same objects owned,
           same _size and _capacity > size.
           The output state is never the empty state */
        void reserve(size_type size){
            if (_size>0 && size <= _capacity) return;
            // size > _capacity >= size => size > _size
            size_type capacity = strategy(size); // capacity >= _capacity
            pointer data = _alloc.allocate(capacity);
            if(_data){
                for(int i = 0 ; i < _size ; ++i){
                    new(&data[i]) T(move(_data[i]));
                }
                _alloc.deallocate(_data,_capacity);
            }
            _capacity = capacity;
            _data = data;
        }

        void push_back (const value_type& val){
            reserve(_size+1);
            new(&_data[_size]) T(val);
            ++_size;
        }
        void push_back (value_type&& val){
            reserve(_size+1);
            new(&_data[_size]) T(move(val));
            ++_size;
        }

        iterator begin(){
            return _data;
        }
        iterator end(){
            return _data + _size;
        }
        const_iterator begin() const{
            return _data;
        }
        const_iterator end()const {
            return _data + _size;
        }
        const_iterator cbegin()const{
            return _data;
        }
        const_iterator cend()const{
            return _data + _size;
        }

        iterator erase (iterator first, iterator last){
            size_type diff = last - first;
            if(!diff)return first;
            move(last,_data+_size,first);
            for(int i = 1 ; i <= diff ; ++i){
                _data[_size - i].~value_type();
            }
            _size -= diff;
            return first;
        }
        iterator erase (iterator position){
            erase(position,position+1);
        }

        void pop_back(){
            assert(_size > 0 && "pop_back on empty vector");
            --_size;
            _data[_size].~value_type();
        }

        bool empty() const{
            return _size == 0;
        }

        reference front(){
            return *_data;
        }
        const_reference front() const{
            return *_data;
        }

        reference back(){
            return _data[_size-1];
        }
        const_reference back() const{
            return _data[_size-1];
        }

        iterator insert (const_iterator position, const value_type& val){
            if(position == end()){
                push_back(val);
                return end()-1;
            }
            if(_capacity == _size){
                //printf("way 1");
                size_t capacity = strategy(_size +1);
                size_t diff = position-_data;
                pointer data = _alloc.allocate(capacity);
                for(pointer it = _data ; it < position ; ++it){
                    new (data + (it-_data)) T(move(*it));
                }
                for(const_pointer it = position ; it < _data + _size ; ++it){
                    new (data + (it-_data)+1) T(move(*it));
                }
                new (data + diff) T(val);
                _capacity = capacity;
                _data = data;
                ++_size;
                return _data + diff;
            }
            else{
                assert(_capacity > _size);
                iterator newpos = const_cast<iterator>(position);
                new(_data +_size) T();
                move_backward(newpos,_data + _size,_data + _size +1);
                *newpos = val;
                ++_size;
                return newpos;
            }
        }

        void clear(){// switch any valid state to the empty valid state
            this->~vector();
            _data = nullptr;
            _size = 0;
            _capacity = 0;
        }

        void resize(size_type n){
            if(n == _size) return;
            if(n < _size){
                for(int i = n ; i < _size ; ++i){
                    _data[i].~value_type();
                }
                _size = n;
                return;
            }
            reserve(n);
            for(int i = _size ; i < n ; ++i){
                new(_data + i) T();
            }
            _size = n;
            return;
        }
    };
}
#endif
