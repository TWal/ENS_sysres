#ifndef __SUPOS_CPP_VECTOR
#define __SUPOS_CPP_VECTOR

#include <cstddef>
#include <memory>
#include <assert.h>
#include <utility>

namespace std{
    template < class T, class Alloc = allocator<T> >
    class vector{
    public :
        typedef T value_type;
        typedef Alloc allocator_type;
        typedef T* pointer;
        typedef T& reference;
        typedef size_t size_type;
        typedef pointer iterator;
        typedef const T* const_iterator;

    private :
        Alloc _alloc;
        pointer _data;
        size_type _size;
        size_type _capacity;

        inline size_type strategy(size_type s){
            size_t res = 1 << (8*sizeof(size_t) - __builtin_clz(s+1)+1);
            if(res) return res;
            else return s;
        }


    public :

        explicit vector (const allocator_type& alloc = allocator_type())
            :_alloc(alloc),_data(nullptr),_size(0),_capacity(0){
        }
        explicit vector (size_type n) : _alloc(){
            _size = n;
            _capacity = strategy(n);
            _data = _alloc.allocate(_capacity);
            for(size_t i = 0 ; i < n ; ++i){
                _data[i].T();
            }
        }
        vector (const vector& oth): _alloc(oth._alloc),_data(nullptr),
                                    _size(0),_capacity(0){
            reserve(oth._size);
            _size = oth._size;
            for(int i =0 ; i < _size;++i){
                _data[i] = oth._data[i];
            }
        }
        vector (vector&& oth): _alloc(move(oth._alloc)),_data(oth._data),
                                     _size(oth._size),_capacity(oth._capacity){}

        vector (size_type n, const value_type& val,
                const allocator_type& alloc = allocator_type());

        ~vector(){
            if(_size && _data){
                for(size_t i = 0 ; i < _size ; ++i){
                    _data[i].~value_type();
                }
            }
            if(_data) _alloc.deallocate(_data,_capacity);
        }
        reference operator [](size_type i){
            return _data[i];
        }
        reference at(size_type i){
            assert(i < _size && "At assert failed");
            return _data[i];
        }
        size_type size(){
            return _size;
        }
        void reserve(size_type size){
            if (_size>0 && size <= _capacity) return;
            size_type capacity = strategy(size);
            pointer data = _alloc.allocate(capacity);
            for(int i = 0 ; i < _size ; ++i){
                data[i] = move(_data[i]);
            }
            _alloc.deallocate(_data,_capacity);
            _capacity = capacity;
            _data = data;
        }
        void push_back (const value_type& val){
            reserve(_size+1);
            _data[_size] = val;
            ++_size;
        }
        iterator begin(){
            return _data;
        }
        iterator end(){
            return _data + _size;
        }
        const_iterator begin() const{
            return _data;
        }
        const_iterator end()const {
            return _data + _size;
        }
        const_iterator cbegin()const{
            return _data;
        }
        const_iterator cend()const{
            return _data + _size;
        }
        iterator erase (iterator first, iterator last){
            size_type diff = last - first;
            if(!diff)return end();
            for (int i = first - _data ; i < _size ; ++i){
                _data[i] = move(_data[i + diff]);
            }
            _size -= diff;

        }
        iterator erase (iterator position){
            erase(position,position+1);
        }
        void pop_back(){
            assert(_size > 0 && "pop_back on empty vector");
            --_size;
            _data[_size].~value_type();
        }

    };
}
#endif
