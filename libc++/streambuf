#ifndef __SUPOS_CPP_STREAMBUF
#define __SUPOS_CPP_STREAMBUF

#include<iosfwd>

namespace std{

    template<class charT, class traits>
    class basic_streambuf{
    public :
        using char_type = charT;
        using traits_type = traits;
        using int_type = typename traits::int_type;
        using pos_type = streamsize;
        using off_type = streamoff;
    private:
        char_type *_eback;
        char_type *_gptr;
        char_type *_egptr;
        char_type *_pbase;
        char_type *_pptr;
        char_type *_epptr;
    protected:
        char_type *eback(){return _eback;}
        char_type *gptr(){return _gptr;}
        char_type *egptr(){return _egptr;}
        char_type *pbase(){return _pbase;}
        char_type *pptr(){return _pptr;}
        char_type *epptr(){return _epptr;}
        void gbump(int n){if(_gptr) _gptr += n;}
        void setg (char_type* new_eback, char_type* new_gptr, char_type* new_egptr){
            _eback = new_eback;
            _gptr = new_gptr;
            _egptr = new_egptr;
        }
        void pbump(int n){if(_pptr) _pptr += n;}
        void setp (char_type* new_pbase, char_type* new_pptr, char_type* new_epptr){
            _pbase = new_pbase;
            _pptr = new_pptr;
            _epptr = new_epptr;
        }

    protected :
    protected:basic_streambuf(){
        setg(nullptr,nullptr,nullptr);
        setp(nullptr,nullptr,nullptr);
    }
        virtual basic_streambuf* setbuf(char_type* s, streamsize n){
            return this;
        }
        virtual pos_type seekoff (off_type off, ios_base::seekdir way,
                          ios_base::openmode which = ios_base::in | ios_base::out){
            return -1;
        }
        virtual pos_type seekpos (pos_type pos,
                          ios_base::openmode which = ios_base::in | ios_base::out){
            return -1;
        }
        virtual int sync() {return 0;}
        virtual streamsize showmanyc(){return 0;}
        // TODO not standard compliant
        virtual streamsize xsgetn (char_type* s, streamsize n){return 0;};
        virtual int_type underflow(){ return traits_type::eof();}
        virtual int_type uflow() {
            if (underflow() == traits_type::eof() ) return traits_type::eof();
            gbump(1);
            return traits_type::to_int_type(gptr()[-1]);
        }
        virtual int_type pbackfail (int_type c = traits_type::eof()){
            return traits_type::eof();
        }
        // TODO not standard compliant
        virtual streamsize xsputn (const char_type* s, streamsize n){return 0;};
        virtual int_type overflow (int_type c = traits_type::eof()){
            return traits_type::eof();
        }
    public:
        int_type sgetc() {
            if ( (!gptr()) || (gptr()==egptr()) ) return underflow();
            else return traits_type::to_int_type(*gptr());
        }
        int_type sbumpc() {
            if ( (!gptr()) || (gptr()==egptr()) ) return uflow();
            gbump(1);
            return traits_type::to_int_type(gptr()[-1]);
        }
        int_type snextc() {
            if ( sbumpc() == traits_type::eof() ) return traits_type::eof();
            else return sgetc();
        }
        int_type sputc(char_type c) {
            if ( (!pptr()) || (pptr()==epptr()) )
                return overflow(traits_type::to_int_type(c));
            *pptr()=c;
            pbump(1);
            return traits_type::to_int_type(c);
        }
        streamsize sgetn (char_type* s, streamsize n){
            return xsgetn(s,n);
        }
        streamsize sputn (const char_type* s, streamsize n){
            return xsputn(s,n);
        }


    };



}

#endif
