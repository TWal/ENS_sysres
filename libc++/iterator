#ifndef __SUPOS_CPP_ITERATOR
#define __SUPOS_CPP_ITERATOR

#include<cstddef>

namespace std{

    struct input_iterator_tag { };

    struct output_iterator_tag { };

    struct forward_iterator_tag
        : public input_iterator_tag { };

    struct bidirectional_iterator_tag
        : public forward_iterator_tag { };

    struct random_access_iterator_tag
        : public bidirectional_iterator_tag { };

    template< class Iterator>
    struct iterator_traits;

    template<class T>
    struct iterator_traits<T*>{
        typedef ptrdiff_t difference_type;
        typedef T value_type;
        typedef T* pointer;
        typedef T& reference;
        typedef random_access_iterator_tag iterator_category;
    };

    template<class T>
    struct iterator_traits<const T*>{
        typedef ptrdiff_t difference_type;
        typedef T value_type;
        typedef const T* pointer;
        typedef const T& reference;
        typedef random_access_iterator_tag iterator_category;
    };

    template<class InputIterator>
    typename iterator_traits<InputIterator>::difference_type
    distance (InputIterator first, InputIterator last,input_iterator_tag){
        typename iterator_traits<InputIterator>::difference_type count = 1;
        if(first == last) return 0;
        while(++first!=last) ++count;
        return count;
    }

    template<class InputIterator>
    typename iterator_traits<InputIterator>::difference_type
    distance (InputIterator first, InputIterator last,random_access_iterator_tag){
        return last - first;
    }

    template<class InputIterator>
    typename iterator_traits<InputIterator>::difference_type
    distance (InputIterator first, InputIterator last){
        return distance(first,last,iterator_traits<InputIterator>::iterator_category);
    }

    
    template <class InputIterator, class Distance>
    void advance (InputIterator& it, Distance n,input_iterator_tag){
        for(Distance i = 0 ; i < n ; ++i){
            ++it;
        }
    }
    template <class InputIterator, class Distance>
    void advance (InputIterator& it, Distance n,random_access_iterator_tag){
        it += n;
    }
    template <class InputIterator, class Distance>
    void advance (InputIterator& it, Distance n){
        return advance(it,iterator_traits<InputIterator>::iterator_category);
    }

}

#endif
